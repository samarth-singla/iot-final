{"ast":null,"code":"/**\n * ThingSpeak API Service\n * Handles fetching data from ThingSpeak channels\n */\n\nconst DEFAULT_READ_API_KEY = \"MWFBV98HOZOHTHY4\";\nconst BASE_URL = \"https://api.thingspeak.com/channels\";\n\n/**\n * Fetches the latest data from a ThingSpeak channel\n */\nexport const fetchLatestData = async (channelId, apiKey = DEFAULT_READ_API_KEY, results = 1) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n  try {\n    const url = `${BASE_URL}/${channelId}/feeds.json?api_key=${apiKey}&results=${results}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`ThingSpeak API error: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data || !data.feeds || data.feeds.length === 0) {\n      throw new Error('No data available from ThingSpeak');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching data from ThingSpeak:', error);\n    throw error;\n  }\n};\n\n/**\n * Calculate blood pressure from PTT\n * @param {Array} ecgSamples - Array of ECG samples\n * @param {number} spo2 - SpO2 value\n * @returns {Object} - Systolic and diastolic BP\n */\nconst calculateBP = (ecgSamples, spo2) => {\n  // Assuming 1000Hz sampling rate (1 sample = 1ms)\n  const PTT = 0.1; // 100ms - simplified assumption\n\n  // BP estimation formulas\n  const systolic = 150 - 100 * PTT;\n  const diastolic = 100 - 60 * PTT;\n  return {\n    systolic: Math.round(systolic),\n    diastolic: Math.round(diastolic)\n  };\n};\n\n/**\n * Maps the raw ThingSpeak data to patient vital signs\n * Field mapping:\n * field1: Temperature (°C)\n * field2: Humidity (%)\n * field3: Heart Rate (BPM)\n * field4: SpO2 (%)\n * field5: Latitude\n * field6: Longitude\n * field7: Avg ECG\n * field8: ECG Sample Array\n */\nexport const mapThingSpeakToPatientVitals = data => {\n  if (!data || !data.feeds || data.feeds.length === 0) {\n    return null;\n  }\n  const latestEntry = data.feeds[0];\n\n  // Convert string values to numbers\n  const temperature = parseFloat(latestEntry.field1);\n  const humidity = parseFloat(latestEntry.field2);\n  const heartRate = parseFloat(latestEntry.field3);\n  const spo2 = parseFloat(latestEntry.field4);\n  const latitude = parseFloat(latestEntry.field5);\n  const longitude = parseFloat(latestEntry.field6);\n  const avgEcg = parseFloat(latestEntry.field7);\n  const ecgSamples = JSON.parse(latestEntry.field8);\n\n  // Calculate BP from ECG samples and SpO2\n  const bp = calculateBP(ecgSamples, spo2);\n  return {\n    vitals: {\n      temperature: isNaN(temperature) ? \"--\" : temperature.toFixed(1),\n      humidity: isNaN(humidity) ? \"--\" : humidity.toFixed(1),\n      heartRate: isNaN(heartRate) ? \"--\" : Math.round(heartRate),\n      spo2: isNaN(spo2) ? \"--\" : Math.round(spo2),\n      avgEcg: isNaN(avgEcg) ? \"--\" : avgEcg,\n      ecgSamples: Array.isArray(ecgSamples) ? ecgSamples : [],\n      bp: bp\n    },\n    location: {\n      lat: isNaN(latitude) ? null : latitude,\n      lng: isNaN(longitude) ? null : longitude,\n      accuracy: 15\n    },\n    status: {\n      temperature: temperature > 37.8 ? \"Elevated\" : temperature < 35.5 ? \"Low\" : \"Normal\",\n      heartRate: heartRate > 100 ? \"Elevated\" : heartRate < 60 ? \"Low\" : \"Normal\",\n      spo2: spo2 < 95 ? \"Low\" : \"Normal\",\n      bp: bp.systolic > 140 || bp.diastolic > 90 ? \"Elevated\" : bp.systolic < 90 || bp.diastolic < 60 ? \"Low\" : \"Normal\"\n    },\n    lastUpdated: new Date(latestEntry.created_at).toLocaleString()\n  };\n};\n\n/**\n * Fetches and formats patient vitals from ThingSpeak\n */\nexport const getPatientVitals = async channelId => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n  try {\n    const data = await fetchLatestData(channelId);\n    const vitals = mapThingSpeakToPatientVitals(data);\n    if (!vitals) {\n      throw new Error('Failed to map ThingSpeak data to vitals');\n    }\n    return vitals;\n  } catch (error) {\n    console.error('Error getting patient vitals:', error);\n    throw error;\n  }\n};\nexport default {\n  fetchLatestData,\n  mapThingSpeakToPatientVitals,\n  getPatientVitals\n};","map":{"version":3,"names":["DEFAULT_READ_API_KEY","BASE_URL","fetchLatestData","channelId","apiKey","results","Error","url","response","fetch","ok","status","data","json","feeds","length","error","console","calculateBP","ecgSamples","spo2","PTT","systolic","diastolic","Math","round","mapThingSpeakToPatientVitals","latestEntry","temperature","parseFloat","field1","humidity","field2","heartRate","field3","field4","latitude","field5","longitude","field6","avgEcg","field7","JSON","parse","field8","bp","vitals","isNaN","toFixed","Array","isArray","location","lat","lng","accuracy","lastUpdated","Date","created_at","toLocaleString","getPatientVitals"],"sources":["/home/ujjwal-gupta/Desktop/temp/IoT-Main/frontend/src/services/ThingSpeakService.js"],"sourcesContent":["\n/**\n * ThingSpeak API Service\n * Handles fetching data from ThingSpeak channels\n */\n\nconst DEFAULT_READ_API_KEY = \"MWFBV98HOZOHTHY4\";\nconst BASE_URL = \"https://api.thingspeak.com/channels\";\n\n/**\n * Fetches the latest data from a ThingSpeak channel\n */\nexport const fetchLatestData = async (channelId, apiKey = DEFAULT_READ_API_KEY, results = 1) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n\n  try {\n    const url = `${BASE_URL}/${channelId}/feeds.json?api_key=${apiKey}&results=${results}`;\n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`ThingSpeak API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (!data || !data.feeds || data.feeds.length === 0) {\n      throw new Error('No data available from ThingSpeak');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Error fetching data from ThingSpeak:', error);\n    throw error;\n  }\n};\n\n/**\n * Calculate blood pressure from PTT\n * @param {Array} ecgSamples - Array of ECG samples\n * @param {number} spo2 - SpO2 value\n * @returns {Object} - Systolic and diastolic BP\n */\nconst calculateBP = (ecgSamples, spo2) => {\n  // Assuming 1000Hz sampling rate (1 sample = 1ms)\n  const PTT = 0.1; // 100ms - simplified assumption\n  \n  // BP estimation formulas\n  const systolic = 150 - (100 * PTT);\n  const diastolic = 100 - (60 * PTT);\n  \n  return {\n    systolic: Math.round(systolic),\n    diastolic: Math.round(diastolic)\n  };\n};\n\n/**\n * Maps the raw ThingSpeak data to patient vital signs\n * Field mapping:\n * field1: Temperature (°C)\n * field2: Humidity (%)\n * field3: Heart Rate (BPM)\n * field4: SpO2 (%)\n * field5: Latitude\n * field6: Longitude\n * field7: Avg ECG\n * field8: ECG Sample Array\n */\nexport const mapThingSpeakToPatientVitals = (data) => {\n  if (!data || !data.feeds || data.feeds.length === 0) {\n    return null;\n  }\n  \n  const latestEntry = data.feeds[0];\n  \n  // Convert string values to numbers\n  const temperature = parseFloat(latestEntry.field1);\n  const humidity = parseFloat(latestEntry.field2);\n  const heartRate = parseFloat(latestEntry.field3);\n  const spo2 = parseFloat(latestEntry.field4);\n  const latitude = parseFloat(latestEntry.field5);\n  const longitude = parseFloat(latestEntry.field6);\n  const avgEcg = parseFloat(latestEntry.field7);\n  const ecgSamples = JSON.parse(latestEntry.field8);\n\n  // Calculate BP from ECG samples and SpO2\n  const bp = calculateBP(ecgSamples, spo2);\n\n  return {\n    vitals: {\n      temperature: isNaN(temperature) ? \"--\" : temperature.toFixed(1),\n      humidity: isNaN(humidity) ? \"--\" : humidity.toFixed(1),\n      heartRate: isNaN(heartRate) ? \"--\" : Math.round(heartRate),\n      spo2: isNaN(spo2) ? \"--\" : Math.round(spo2),\n      avgEcg: isNaN(avgEcg) ? \"--\" : avgEcg,\n      ecgSamples: Array.isArray(ecgSamples) ? ecgSamples : [],\n      bp: bp\n    },\n    location: {\n      lat: isNaN(latitude) ? null : latitude,\n      lng: isNaN(longitude) ? null : longitude,\n      accuracy: 15\n    },\n    status: {\n      temperature: temperature > 37.8 ? \"Elevated\" : temperature < 35.5 ? \"Low\" : \"Normal\",\n      heartRate: heartRate > 100 ? \"Elevated\" : heartRate < 60 ? \"Low\" : \"Normal\",\n      spo2: spo2 < 95 ? \"Low\" : \"Normal\",\n      bp: bp.systolic > 140 || bp.diastolic > 90 ? \"Elevated\" : \n          bp.systolic < 90 || bp.diastolic < 60 ? \"Low\" : \"Normal\"\n    },\n    lastUpdated: new Date(latestEntry.created_at).toLocaleString()\n  };\n};\n\n/**\n * Fetches and formats patient vitals from ThingSpeak\n */\nexport const getPatientVitals = async (channelId) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n\n  try {\n    const data = await fetchLatestData(channelId);\n    const vitals = mapThingSpeakToPatientVitals(data);\n    \n    if (!vitals) {\n      throw new Error('Failed to map ThingSpeak data to vitals');\n    }\n    \n    return vitals;\n  } catch (error) {\n    console.error('Error getting patient vitals:', error);\n    throw error;\n  }\n};\n\nexport default {\n  fetchLatestData,\n  mapThingSpeakToPatientVitals,\n  getPatientVitals\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}