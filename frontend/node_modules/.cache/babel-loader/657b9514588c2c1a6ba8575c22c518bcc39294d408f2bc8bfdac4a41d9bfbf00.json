{"ast":null,"code":"/**\n * ThingSpeak API Service\n * Handles fetching data from ThingSpeak channels\n */\n\nconst DEFAULT_READ_API_KEY = \"MWFBV98HOZOHTHY4\";\nconst BASE_URL = \"https://api.thingspeak.com/channels\";\n\n/**\n * Fetches the latest data from a ThingSpeak channel\n */\nexport const fetchLatestData = async (channelId, apiKey = DEFAULT_READ_API_KEY, results = 1) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n  try {\n    const url = `${BASE_URL}/${channelId}/feeds.json?api_key=${apiKey}&results=${results}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`ThingSpeak API error: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data || !data.feeds || data.feeds.length === 0) {\n      throw new Error('No data available from ThingSpeak');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching data from ThingSpeak:', error);\n    throw error;\n  }\n};\n\n/**\n * Maps the raw ThingSpeak data to patient vital signs\n * Field mapping:\n * field1: Temperature (°C)\n * field2: Humidity (%)\n * field3: Heart Rate (BPM)\n * field4: SpO2 (%)\n * field5: Latitude\n * field6: Longitude\n * field7: Avg ECG\n * field8: ECG Sample Array\n */\nexport const mapThingSpeakToPatientVitals = data => {\n  if (!data || !data.feeds || data.feeds.length === 0) {\n    return null;\n  }\n  const latestEntry = data.feeds[0];\n\n  // Convert string values to numbers\n  const temperature = parseFloat(latestEntry.field1);\n  const humidity = parseFloat(latestEntry.field2);\n  const heartRate = parseFloat(latestEntry.field3);\n  const spo2 = parseFloat(latestEntry.field4);\n  const latitude = parseFloat(latestEntry.field5);\n  const longitude = parseFloat(latestEntry.field6);\n  const avgEcg = parseFloat(latestEntry.field7);\n  const ecgSamples = JSON.parse(latestEntry.field8);\n  return {\n    vitals: {\n      temperature: isNaN(temperature) ? \"--\" : temperature.toFixed(1),\n      humidity: isNaN(humidity) ? \"--\" : humidity.toFixed(1),\n      heartRate: isNaN(heartRate) ? \"--\" : Math.round(heartRate),\n      spo2: isNaN(spo2) ? \"--\" : Math.round(spo2),\n      avgEcg: isNaN(avgEcg) ? \"--\" : avgEcg,\n      ecgSamples: Array.isArray(ecgSamples) ? ecgSamples : []\n    },\n    location: {\n      lat: isNaN(latitude) ? null : latitude,\n      lng: isNaN(longitude) ? null : longitude,\n      accuracy: 15\n    },\n    status: {\n      temperature: temperature > 37.8 ? \"Elevated\" : temperature < 35.5 ? \"Low\" : \"Normal\",\n      heartRate: heartRate > 100 ? \"Elevated\" : heartRate < 60 ? \"Low\" : \"Normal\",\n      spo2: spo2 < 95 ? \"Low\" : \"Normal\"\n    },\n    lastUpdated: new Date(latestEntry.created_at).toLocaleString()\n  };\n};\n\n/**\n * Fetches and formats patient vitals from ThingSpeak\n */\nexport const getPatientVitals = async channelId => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n  try {\n    const data = await fetchLatestData(channelId);\n    const vitals = mapThingSpeakToPatientVitals(data);\n    if (!vitals) {\n      throw new Error('Failed to map ThingSpeak data to vitals');\n    }\n    return vitals;\n  } catch (error) {\n    console.error('Error getting patient vitals:', error);\n    throw error;\n  }\n};\nexport default {\n  fetchLatestData,\n  mapThingSpeakToPatientVitals,\n  getPatientVitals\n};","map":{"version":3,"names":["DEFAULT_READ_API_KEY","BASE_URL","fetchLatestData","channelId","apiKey","results","Error","url","response","fetch","ok","status","data","json","feeds","length","error","console","mapThingSpeakToPatientVitals","latestEntry","temperature","parseFloat","field1","humidity","field2","heartRate","field3","spo2","field4","latitude","field5","longitude","field6","avgEcg","field7","ecgSamples","JSON","parse","field8","vitals","isNaN","toFixed","Math","round","Array","isArray","location","lat","lng","accuracy","lastUpdated","Date","created_at","toLocaleString","getPatientVitals"],"sources":["/home/ujjwal-gupta/Desktop/temp/IoT-Main/frontend/src/services/ThingSpeakService.js"],"sourcesContent":["\n/**\n * ThingSpeak API Service\n * Handles fetching data from ThingSpeak channels\n */\n\nconst DEFAULT_READ_API_KEY = \"MWFBV98HOZOHTHY4\";\nconst BASE_URL = \"https://api.thingspeak.com/channels\";\n\n/**\n * Fetches the latest data from a ThingSpeak channel\n */\nexport const fetchLatestData = async (channelId, apiKey = DEFAULT_READ_API_KEY, results = 1) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n\n  try {\n    const url = `${BASE_URL}/${channelId}/feeds.json?api_key=${apiKey}&results=${results}`;\n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`ThingSpeak API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (!data || !data.feeds || data.feeds.length === 0) {\n      throw new Error('No data available from ThingSpeak');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Error fetching data from ThingSpeak:', error);\n    throw error;\n  }\n};\n\n/**\n * Maps the raw ThingSpeak data to patient vital signs\n * Field mapping:\n * field1: Temperature (°C)\n * field2: Humidity (%)\n * field3: Heart Rate (BPM)\n * field4: SpO2 (%)\n * field5: Latitude\n * field6: Longitude\n * field7: Avg ECG\n * field8: ECG Sample Array\n */\nexport const mapThingSpeakToPatientVitals = (data) => {\n  if (!data || !data.feeds || data.feeds.length === 0) {\n    return null;\n  }\n  \n  const latestEntry = data.feeds[0];\n  \n  // Convert string values to numbers\n  const temperature = parseFloat(latestEntry.field1);\n  const humidity = parseFloat(latestEntry.field2);\n  const heartRate = parseFloat(latestEntry.field3);\n  const spo2 = parseFloat(latestEntry.field4);\n  const latitude = parseFloat(latestEntry.field5);\n  const longitude = parseFloat(latestEntry.field6);\n  const avgEcg = parseFloat(latestEntry.field7);\n  const ecgSamples = JSON.parse(latestEntry.field8);\n\n  return {\n    vitals: {\n      temperature: isNaN(temperature) ? \"--\" : temperature.toFixed(1),\n      humidity: isNaN(humidity) ? \"--\" : humidity.toFixed(1),\n      heartRate: isNaN(heartRate) ? \"--\" : Math.round(heartRate),\n      spo2: isNaN(spo2) ? \"--\" : Math.round(spo2),\n      avgEcg: isNaN(avgEcg) ? \"--\" : avgEcg,\n      ecgSamples: Array.isArray(ecgSamples) ? ecgSamples : []\n    },\n    location: {\n      lat: isNaN(latitude) ? null : latitude,\n      lng: isNaN(longitude) ? null : longitude,\n      accuracy: 15\n    },\n    status: {\n      temperature: temperature > 37.8 ? \"Elevated\" : temperature < 35.5 ? \"Low\" : \"Normal\",\n      heartRate: heartRate > 100 ? \"Elevated\" : heartRate < 60 ? \"Low\" : \"Normal\",\n      spo2: spo2 < 95 ? \"Low\" : \"Normal\"\n    },\n    lastUpdated: new Date(latestEntry.created_at).toLocaleString()\n  };\n};\n\n/**\n * Fetches and formats patient vitals from ThingSpeak\n */\nexport const getPatientVitals = async (channelId) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n\n  try {\n    const data = await fetchLatestData(channelId);\n    const vitals = mapThingSpeakToPatientVitals(data);\n    \n    if (!vitals) {\n      throw new Error('Failed to map ThingSpeak data to vitals');\n    }\n    \n    return vitals;\n  } catch (error) {\n    console.error('Error getting patient vitals:', error);\n    throw error;\n  }\n};\n\nexport default {\n  fetchLatestData,\n  mapThingSpeakToPatientVitals,\n  getPatientVitals\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}