{"ast":null,"code":"/**\r\n * ThingSpeak API Service\r\n * Handles fetching data from ThingSpeak channels\r\n */\n\nconst DEFAULT_READ_API_KEY = \"MWFBV98HOZOHTHY4\";\nconst BASE_URL = \"https://api.thingspeak.com/channels\";\n\n/**\r\n * Fetches the latest data from a ThingSpeak channel\r\n */\nexport const fetchLatestData = async (channelId, apiKey = DEFAULT_READ_API_KEY, results = 1) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n  try {\n    const url = `${BASE_URL}/${channelId}/feeds.json?api_key=${apiKey}&results=${results}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`ThingSpeak API error: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data || !data.feeds || data.feeds.length === 0) {\n      throw new Error('No data available from ThingSpeak');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching data from ThingSpeak:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Calculate blood pressure from PTT\r\n * @param {Array} ecgSamples - Array of ECG samples\r\n * @param {number} spo2 - SpO2 value\r\n * @returns {Object} - Systolic and diastolic BP\r\n */\nconst calculateBP = (ecgSamples, spo2) => {\n  // Assuming 1000Hz sampling rate (1 sample = 1ms)\n  const PTT = 0.1; // 100ms - simplified assumption\n\n  // BP estimation formulas\n  const systolic = 150 - 100 * PTT;\n  const diastolic = 100 - 60 * PTT;\n  return {\n    systolic: Math.round(systolic),\n    diastolic: Math.round(diastolic)\n  };\n};\n\n/**\r\n * Maps the raw ThingSpeak data to patient vital signs\r\n * Field mapping:\r\n * field1: Temperature (°C)\r\n * field2: Emergency Alert Level (0: Normal, 1: Moderate Risk, 2: High Risk)\r\n * field3: Heart Rate (BPM)\r\n * field4: SpO2 (%)\r\n * field5: Latitude\r\n * field6: Longitude\r\n * field7: Avg ECG\r\n * field8: ECG Sample Array\r\n */\nexport const mapThingSpeakToPatientVitals = data => {\n  if (!data || !data.feeds || data.feeds.length === 0) {\n    return null;\n  }\n  const latestEntry = data.feeds[0];\n\n  // Convert string values to numbers\n  const temperature = parseFloat(latestEntry.field1);\n  const alertLevel = parseInt(latestEntry.field2);\n  const heartRate = parseFloat(latestEntry.field3);\n  const spo2 = parseFloat(latestEntry.field4);\n  const latitude = parseFloat(latestEntry.field5);\n  const longitude = parseFloat(latestEntry.field6);\n  const avgEcg = parseFloat(latestEntry.field7);\n  const ecgSamples = JSON.parse(latestEntry.field8);\n\n  // Calculate BP from ECG samples and SpO2\n  const bp = calculateBP(ecgSamples, spo2);\n  return {\n    vitals: {\n      temperature: isNaN(temperature) ? \"--\" : temperature.toFixed(1),\n      alertLevel: isNaN(alertLevel) ? 0 : alertLevel,\n      heartRate: isNaN(heartRate) ? \"--\" : Math.round(heartRate),\n      spo2: isNaN(spo2) ? \"--\" : Math.round(spo2),\n      avgEcg: isNaN(avgEcg) ? \"--\" : avgEcg,\n      ecgSamples: Array.isArray(ecgSamples) ? ecgSamples : [],\n      bp: bp\n    },\n    location: {\n      lat: isNaN(latitude) ? null : latitude,\n      lng: isNaN(longitude) ? null : longitude,\n      accuracy: 15\n    },\n    status: {\n      temperature: temperature > 37.8 ? \"Elevated\" : temperature < 35.5 ? \"Low\" : \"Normal\",\n      heartRate: heartRate > 100 ? \"Elevated\" : heartRate < 60 ? \"Low\" : \"Normal\",\n      spo2: spo2 < 95 ? \"Low\" : \"Normal\",\n      bp: bp.systolic > 140 || bp.diastolic > 90 ? \"Elevated\" : bp.systolic < 90 || bp.diastolic < 60 ? \"Low\" : \"Normal\",\n      alert: alertLevel === 0 ? \"Normal\" : alertLevel === 1 ? \"Moderate Risk\" : \"High Risk\"\n    },\n    lastUpdated: new Date(latestEntry.created_at).toLocaleString()\n  };\n};\n\n/**\r\n * Fetches and formats patient vitals from ThingSpeak\r\n */\nexport const getPatientVitals = async channelId => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n  try {\n    const data = await fetchLatestData(channelId);\n    const vitals = mapThingSpeakToPatientVitals(data);\n    if (!vitals) {\n      throw new Error('Failed to map ThingSpeak data to vitals');\n    }\n    return vitals;\n  } catch (error) {\n    console.error('Error getting patient vitals:', error);\n    throw error;\n  }\n};\nexport default {\n  fetchLatestData,\n  mapThingSpeakToPatientVitals,\n  getPatientVitals\n};","map":{"version":3,"names":["DEFAULT_READ_API_KEY","BASE_URL","fetchLatestData","channelId","apiKey","results","Error","url","response","fetch","ok","status","data","json","feeds","length","error","console","calculateBP","ecgSamples","spo2","PTT","systolic","diastolic","Math","round","mapThingSpeakToPatientVitals","latestEntry","temperature","parseFloat","field1","alertLevel","parseInt","field2","heartRate","field3","field4","latitude","field5","longitude","field6","avgEcg","field7","JSON","parse","field8","bp","vitals","isNaN","toFixed","Array","isArray","location","lat","lng","accuracy","alert","lastUpdated","Date","created_at","toLocaleString","getPatientVitals"],"sources":["C:/Users/SAMARTH/OneDrive/Desktop/iot ujj/IoT-Main/frontend/src/services/ThingSpeakService.js"],"sourcesContent":["/**\r\n * ThingSpeak API Service\r\n * Handles fetching data from ThingSpeak channels\r\n */\r\n\r\nconst DEFAULT_READ_API_KEY = \"MWFBV98HOZOHTHY4\";\r\nconst BASE_URL = \"https://api.thingspeak.com/channels\";\r\n\r\n/**\r\n * Fetches the latest data from a ThingSpeak channel\r\n */\r\nexport const fetchLatestData = async (channelId, apiKey = DEFAULT_READ_API_KEY, results = 1) => {\r\n  if (!channelId) {\r\n    throw new Error('Channel ID is required');\r\n  }\r\n\r\n  try {\r\n    const url = `${BASE_URL}/${channelId}/feeds.json?api_key=${apiKey}&results=${results}`;\r\n    const response = await fetch(url);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`ThingSpeak API error: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data || !data.feeds || data.feeds.length === 0) {\r\n      throw new Error('No data available from ThingSpeak');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data from ThingSpeak:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate blood pressure from PTT\r\n * @param {Array} ecgSamples - Array of ECG samples\r\n * @param {number} spo2 - SpO2 value\r\n * @returns {Object} - Systolic and diastolic BP\r\n */\r\nconst calculateBP = (ecgSamples, spo2) => {\r\n  // Assuming 1000Hz sampling rate (1 sample = 1ms)\r\n  const PTT = 0.1; // 100ms - simplified assumption\r\n  \r\n  // BP estimation formulas\r\n  const systolic = 150 - (100 * PTT);\r\n  const diastolic = 100 - (60 * PTT);\r\n  \r\n  return {\r\n    systolic: Math.round(systolic),\r\n    diastolic: Math.round(diastolic)\r\n  };\r\n};\r\n\r\n/**\r\n * Maps the raw ThingSpeak data to patient vital signs\r\n * Field mapping:\r\n * field1: Temperature (°C)\r\n * field2: Emergency Alert Level (0: Normal, 1: Moderate Risk, 2: High Risk)\r\n * field3: Heart Rate (BPM)\r\n * field4: SpO2 (%)\r\n * field5: Latitude\r\n * field6: Longitude\r\n * field7: Avg ECG\r\n * field8: ECG Sample Array\r\n */\r\nexport const mapThingSpeakToPatientVitals = (data) => {\r\n  if (!data || !data.feeds || data.feeds.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  const latestEntry = data.feeds[0];\r\n  \r\n  // Convert string values to numbers\r\n  const temperature = parseFloat(latestEntry.field1);\r\n  const alertLevel = parseInt(latestEntry.field2);\r\n  const heartRate = parseFloat(latestEntry.field3);\r\n  const spo2 = parseFloat(latestEntry.field4);\r\n  const latitude = parseFloat(latestEntry.field5);\r\n  const longitude = parseFloat(latestEntry.field6);\r\n  const avgEcg = parseFloat(latestEntry.field7);\r\n  const ecgSamples = JSON.parse(latestEntry.field8);\r\n\r\n  // Calculate BP from ECG samples and SpO2\r\n  const bp = calculateBP(ecgSamples, spo2);\r\n\r\n  return {\r\n    vitals: {\r\n      temperature: isNaN(temperature) ? \"--\" : temperature.toFixed(1),\r\n      alertLevel: isNaN(alertLevel) ? 0 : alertLevel,\r\n      heartRate: isNaN(heartRate) ? \"--\" : Math.round(heartRate),\r\n      spo2: isNaN(spo2) ? \"--\" : Math.round(spo2),\r\n      avgEcg: isNaN(avgEcg) ? \"--\" : avgEcg,\r\n      ecgSamples: Array.isArray(ecgSamples) ? ecgSamples : [],\r\n      bp: bp\r\n    },\r\n    location: {\r\n      lat: isNaN(latitude) ? null : latitude,\r\n      lng: isNaN(longitude) ? null : longitude,\r\n      accuracy: 15\r\n    },\r\n    status: {\r\n      temperature: temperature > 37.8 ? \"Elevated\" : temperature < 35.5 ? \"Low\" : \"Normal\",\r\n      heartRate: heartRate > 100 ? \"Elevated\" : heartRate < 60 ? \"Low\" : \"Normal\",\r\n      spo2: spo2 < 95 ? \"Low\" : \"Normal\",\r\n      bp: bp.systolic > 140 || bp.diastolic > 90 ? \"Elevated\" : \r\n          bp.systolic < 90 || bp.diastolic < 60 ? \"Low\" : \"Normal\",\r\n      alert: alertLevel === 0 ? \"Normal\" : alertLevel === 1 ? \"Moderate Risk\" : \"High Risk\"\r\n    },\r\n    lastUpdated: new Date(latestEntry.created_at).toLocaleString()\r\n  };\r\n};\r\n\r\n/**\r\n * Fetches and formats patient vitals from ThingSpeak\r\n */\r\nexport const getPatientVitals = async (channelId) => {\r\n  if (!channelId) {\r\n    throw new Error('Channel ID is required');\r\n  }\r\n\r\n  try {\r\n    const data = await fetchLatestData(channelId);\r\n    const vitals = mapThingSpeakToPatientVitals(data);\r\n    \r\n    if (!vitals) {\r\n      throw new Error('Failed to map ThingSpeak data to vitals');\r\n    }\r\n    \r\n    return vitals;\r\n  } catch (error) {\r\n    console.error('Error getting patient vitals:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  fetchLatestData,\r\n  mapThingSpeakToPatientVitals,\r\n  getPatientVitals\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}