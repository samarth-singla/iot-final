{"ast":null,"code":"/**\n * ThingSpeak API Service\n * Handles fetching data from ThingSpeak channels\n */\n\nconst DEFAULT_READ_API_KEY = \"MWFBV98HOZOHTHY4\";\nconst BASE_URL = \"https://api.thingspeak.com/channels\";\n\n/**\n * Fetches the latest data from a ThingSpeak channel\n */\nexport const fetchLatestData = async (channelId, apiKey = DEFAULT_READ_API_KEY, results = 1) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n  try {\n    const url = `${BASE_URL}/${channelId}/feeds.json?api_key=${apiKey}&results=${results}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`ThingSpeak API error: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data || !data.feeds || data.feeds.length === 0) {\n      throw new Error('No data available from ThingSpeak');\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching data from ThingSpeak:', error);\n    throw error;\n  }\n};\n\n/**\n * Maps the raw ThingSpeak data to patient vital signs\n * Field mapping:\n * field1: Heart Rate (BPM)\n * field2: Temperature (°C)\n * field3: SpO2 (%)\n * field4: Blood Pressure (Systolic)\n * field5: Blood Pressure (Diastolic)\n * field6: Location (Latitude)\n * field7: Location (Longitude)\n * field8: Respiration Rate\n */\nexport const mapThingSpeakToPatientVitals = data => {\n  if (!data || !data.feeds || data.feeds.length === 0) {\n    return null;\n  }\n  const latestEntry = data.feeds[0];\n\n  // Convert string values to numbers where appropriate\n  const pulse = parseFloat(latestEntry.field1);\n  const temperature = parseFloat(latestEntry.field2);\n  const spo2 = parseFloat(latestEntry.field3);\n  const systolic = parseFloat(latestEntry.field4);\n  const diastolic = parseFloat(latestEntry.field5);\n  const respiration = parseFloat(latestEntry.field8);\n  return {\n    vitals: {\n      bloodPressure: {\n        systolic: isNaN(systolic) ? \"--\" : systolic,\n        diastolic: isNaN(diastolic) ? \"--\" : diastolic,\n        display: `${isNaN(systolic) ? \"--\" : systolic}/${isNaN(diastolic) ? \"--\" : diastolic}`\n      },\n      pulse: isNaN(pulse) ? \"--\" : pulse,\n      temperature: isNaN(temperature) ? \"--\" : temperature.toFixed(1),\n      spo2: isNaN(spo2) ? \"--\" : spo2,\n      respiration: isNaN(respiration) ? \"--\" : respiration\n    },\n    location: {\n      lat: parseFloat(latestEntry.field6) || null,\n      lng: parseFloat(latestEntry.field7) || null,\n      accuracy: 15\n    },\n    status: {\n      ecg: pulse > 100 ? \"Elevated\" : pulse < 60 ? \"Low\" : \"Normal\",\n      temperature: temperature > 37.8 ? \"Elevated\" : temperature < 35.5 ? \"Low\" : \"Normal\",\n      spo2: spo2 < 95 ? \"Low\" : \"Normal\"\n    },\n    lastUpdated: new Date(latestEntry.created_at).toLocaleString()\n  };\n};\n\n/**\n * Fetches and formats patient vitals from ThingSpeak\n */\nexport const getPatientVitals = async channelId => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n  try {\n    const data = await fetchLatestData(channelId);\n    const vitals = mapThingSpeakToPatientVitals(data);\n    if (!vitals) {\n      throw new Error('Failed to map ThingSpeak data to vitals');\n    }\n    return vitals;\n  } catch (error) {\n    console.error('Error getting patient vitals:', error);\n    throw error;\n  }\n};\nexport default {\n  fetchLatestData,\n  mapThingSpeakToPatientVitals,\n  getPatientVitals\n};","map":{"version":3,"names":["DEFAULT_READ_API_KEY","BASE_URL","fetchLatestData","channelId","apiKey","results","Error","url","response","fetch","ok","status","data","json","feeds","length","error","console","mapThingSpeakToPatientVitals","latestEntry","pulse","parseFloat","field1","temperature","field2","spo2","field3","systolic","field4","diastolic","field5","respiration","field8","vitals","bloodPressure","isNaN","display","toFixed","location","lat","field6","lng","field7","accuracy","ecg","lastUpdated","Date","created_at","toLocaleString","getPatientVitals"],"sources":["/home/ujjwal-gupta/Desktop/temp/IoT-Main/frontend/src/services/ThingSpeakService.js"],"sourcesContent":["\n/**\n * ThingSpeak API Service\n * Handles fetching data from ThingSpeak channels\n */\n\nconst DEFAULT_READ_API_KEY = \"MWFBV98HOZOHTHY4\";\nconst BASE_URL = \"https://api.thingspeak.com/channels\";\n\n/**\n * Fetches the latest data from a ThingSpeak channel\n */\nexport const fetchLatestData = async (channelId, apiKey = DEFAULT_READ_API_KEY, results = 1) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n\n  try {\n    const url = `${BASE_URL}/${channelId}/feeds.json?api_key=${apiKey}&results=${results}`;\n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`ThingSpeak API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (!data || !data.feeds || data.feeds.length === 0) {\n      throw new Error('No data available from ThingSpeak');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Error fetching data from ThingSpeak:', error);\n    throw error;\n  }\n};\n\n/**\n * Maps the raw ThingSpeak data to patient vital signs\n * Field mapping:\n * field1: Heart Rate (BPM)\n * field2: Temperature (°C)\n * field3: SpO2 (%)\n * field4: Blood Pressure (Systolic)\n * field5: Blood Pressure (Diastolic)\n * field6: Location (Latitude)\n * field7: Location (Longitude)\n * field8: Respiration Rate\n */\nexport const mapThingSpeakToPatientVitals = (data) => {\n  if (!data || !data.feeds || data.feeds.length === 0) {\n    return null;\n  }\n  \n  const latestEntry = data.feeds[0];\n  \n  // Convert string values to numbers where appropriate\n  const pulse = parseFloat(latestEntry.field1);\n  const temperature = parseFloat(latestEntry.field2);\n  const spo2 = parseFloat(latestEntry.field3);\n  const systolic = parseFloat(latestEntry.field4);\n  const diastolic = parseFloat(latestEntry.field5);\n  const respiration = parseFloat(latestEntry.field8);\n\n  return {\n    vitals: {\n      bloodPressure: {\n        systolic: isNaN(systolic) ? \"--\" : systolic,\n        diastolic: isNaN(diastolic) ? \"--\" : diastolic,\n        display: `${isNaN(systolic) ? \"--\" : systolic}/${isNaN(diastolic) ? \"--\" : diastolic}`\n      },\n      pulse: isNaN(pulse) ? \"--\" : pulse,\n      temperature: isNaN(temperature) ? \"--\" : temperature.toFixed(1),\n      spo2: isNaN(spo2) ? \"--\" : spo2,\n      respiration: isNaN(respiration) ? \"--\" : respiration\n    },\n    location: {\n      lat: parseFloat(latestEntry.field6) || null,\n      lng: parseFloat(latestEntry.field7) || null,\n      accuracy: 15\n    },\n    status: {\n      ecg: pulse > 100 ? \"Elevated\" : pulse < 60 ? \"Low\" : \"Normal\",\n      temperature: temperature > 37.8 ? \"Elevated\" : temperature < 35.5 ? \"Low\" : \"Normal\",\n      spo2: spo2 < 95 ? \"Low\" : \"Normal\"\n    },\n    lastUpdated: new Date(latestEntry.created_at).toLocaleString()\n  };\n};\n\n/**\n * Fetches and formats patient vitals from ThingSpeak\n */\nexport const getPatientVitals = async (channelId) => {\n  if (!channelId) {\n    throw new Error('Channel ID is required');\n  }\n\n  try {\n    const data = await fetchLatestData(channelId);\n    const vitals = mapThingSpeakToPatientVitals(data);\n    \n    if (!vitals) {\n      throw new Error('Failed to map ThingSpeak data to vitals');\n    }\n    \n    return vitals;\n  } catch (error) {\n    console.error('Error getting patient vitals:', error);\n    throw error;\n  }\n};\n\nexport default {\n  fetchLatestData,\n  mapThingSpeakToPatientVitals,\n  getPatientVitals\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}